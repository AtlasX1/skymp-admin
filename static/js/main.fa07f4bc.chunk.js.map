{"version":3,"sources":["api/index.js","components/boxCharacter/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["api","getCharacters","port","a","axios","get","BoxCharacter","data","style","border","display","flexDirection","margin","padding","angle","baseContainerAdded","inv","entries","map","el","JSON","stringify","formDesc","isDisabled","isHarvested","isOpen","isRaceMenuOpen","lookDump","nextRelootDatetime","position","profileId","recType","worldOrCell","App","useState","setPort","characters","setCharacters","value","onChange","e","target","onClick","then","res","gridTemplateColumns","character","i","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAOeA,EAFH,CAAEC,cAHK,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EACpBC,IAAMC,IAAN,kCAA8BH,QAA9B,IAA8BA,IAAQ,KAAtC,oBADoB,2CAAH,uD,OC+DJI,EA/DM,SAACC,GAAU,IAAD,IAC7B,OACE,sBACEC,MAAO,CACLC,OAAQ,kBACRC,QAAS,OACTC,cAAe,SACfC,OAAQ,MACRC,QAAS,QANb,UASE,gCACE,yCADF,KAEKN,EAAKO,MAAM,GAFhB,MAEuBP,EAAKO,MAAM,GAFlC,MAEyCP,EAAKO,MAAM,MAEpD,gCACE,sDADF,eACuCP,EAAKQ,oBAAsB,OAElE,gCACE,iDADF,6BACmC,OAEnC,gCACE,6CADF,KAC2B,IAD3B,OAEGR,QAFH,IAEGA,GAFH,UAEGA,EAAMS,WAFT,iBAEG,EAAWC,eAFd,aAEG,EAAoBC,KAAI,SAACC,GAAD,OAAQC,KAAKC,UAAUF,MAAM,OAExD,gCACE,4CADF,KAC0BZ,EAAKe,YAE/B,gCACE,8CADF,eAC+Bf,EAAKgB,YAAc,OAElD,gCACE,+CADF,eACgChB,EAAKiB,aAAe,OAEpD,gCACE,0CADF,eAC2BjB,EAAKkB,QAAU,OAE1C,gCACE,kDADF,eACmClB,EAAKmB,gBAAkB,OAE1D,gCACE,4CADF,eAC6BnB,EAAKoB,UAAY,OAE9C,gCACE,sDADF,eACuCpB,EAAKqB,oBAAsB,OAElE,gCACE,4CADF,MAC2BrB,EAAKsB,SAAS,GADzC,MACgDtB,EAAKsB,SAAS,GAD9D,MAEGtB,EAAKsB,SAAS,MAEjB,gCACE,6CADF,KAC2BtB,EAAKuB,aAEhC,gCACE,2CADF,KACyBvB,EAAKwB,WAE9B,gCACE,+CADF,KAC6BxB,EAAKyB,mBC9BzBC,MAzBf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNhC,EADM,KACAiC,EADA,OAEuBD,mBAAS,IAFhC,mBAENE,EAFM,KAEMC,EAFN,KAKb,OACE,gCACE,gCACE,kDACA,8BACE,uBAAOC,MAAOpC,EAAMqC,SAAU,SAACC,GAAD,OAAOL,EAAQK,EAAEC,OAAOH,eAG1D,8BACE,wBAAQI,QAAS,kBAVrB1C,EAAIC,cAAcC,GAAMyC,MAAK,SAACC,GAAD,OAASP,EAAcO,EAAIrC,KAAKA,UAUzD,8BAEF,qBAAKC,MAAO,CAAEE,QAAS,OAAQmC,oBAAqB,eAApD,SACGT,EAAWlB,KAAI,SAAC4B,EAAWC,GAAZ,OACd,wBAAC,EAAD,2BAAkBD,GAAlB,IAA6BE,IAAKD,cCV7BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fa07f4bc.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst getCharacters = async (port) =>\r\n  axios.get(`http://localhost:${port ?? 3222}/api/charactes`);\r\n\r\nconst api = { getCharacters };\r\n\r\nexport default api;\r\n","import React from \"react\";\r\n\r\nconst BoxCharacter = (data) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        border: \"solid 1px black\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        margin: \"5px\",\r\n        padding: \"10px\",\r\n      }}\r\n    >\r\n      <div>\r\n        <span>angle</span>\r\n        x:{data.angle[0]} y:{data.angle[1]} z:{data.angle[2]}\r\n      </div>\r\n      <div>\r\n        <span>baseContainerAdded</span>: {`${data.baseContainerAdded}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>dynamicFields</span>: нету{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>inventory</span> :{\" \"}\r\n        {data?.inv?.entries?.map((el) => JSON.stringify(el))}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>formDesc</span>: {data.formDesc}\r\n      </div>\r\n      <div>\r\n        <span>isDisabled</span>: {`${data.isDisabled}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>isHarvested</span>: {`${data.isHarvested}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>isOpen</span>: {`${data.isOpen}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>isRaceMenuOpen</span>: {`${data.isRaceMenuOpen}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>lookDump</span>: {`${data.lookDump}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>nextRelootDatetime</span>: {`${data.nextRelootDatetime}`}{\" \"}\r\n      </div>\r\n      <div>\r\n        <span>position</span> x:{data.position[0]} y:{data.position[1]} z:\r\n        {data.position[2]}\r\n      </div>\r\n      <div>\r\n        <span>profileId</span>: {data.profileId}\r\n      </div>\r\n      <div>\r\n        <span>recType</span>: {data.recType}\r\n      </div>\r\n      <div>\r\n        <span>worldOrCell</span>: {data.worldOrCell}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoxCharacter;\r\n","import React, { useState } from \"react\";\nimport api from \"./api\";\nimport { BoxCharacter } from \"./components\";\n\nfunction App() {\n  const [port, setPort] = useState(3222);\n  const [characters, setCharacters] = useState([]);\n  const setCharactersInfo = () =>\n    api.getCharacters(port).then((res) => setCharacters(res.data.data));\n  return (\n    <div>\n      <div>\n        <div>localhost port:</div>\n        <div>\n          <input value={port} onChange={(e) => setPort(e.target.value)} />\n        </div>\n      </div>\n      <div>\n        <button onClick={() => setCharactersInfo()}>Get characters</button>\n      </div>\n      <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\" }}>\n        {characters.map((character, i) => (\n          <BoxCharacter {...character} key={i} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}